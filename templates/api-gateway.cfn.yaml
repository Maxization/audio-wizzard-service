AWSTemplateFormatVersion: "2010-09-09"
Description: ""
Resources:
  DiscordEventHandler:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "DiscordEventHandler is responsible for initial parsing of incoming messages"
      FunctionName: "discord_event_handler"
      Handler: "lambda_function.lambda_handler"
      Code: 
        S3Bucket: 
          Fn::ImportValue:
            LambdasCodeBucketName
        S3Key: discord_event_handler.zip
      MemorySize: 128
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LambdaRole"
      Runtime: "python3.8"
      Timeout: 3
      TracingConfig: 
        Mode: "PassThrough"
      Layers: 
      - !Sub "arn:aws:lambda:${AWS::Region}:770693421928:layer:Klayers-python38-PyNaCl:12"
  ApiGatewayRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "audio-wizzard-service-api"
      ApiKeySourceType: "HEADER"
      EndpointConfiguration: 
        Types: 
        - "REGIONAL"

  ApiGatewayResource:
      Type: "AWS::ApiGateway::Resource"
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        PathPart: "event"
        ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

  ApiGatewayPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      RequestParameters: {}
      MethodResponses: 
      - 
        ResponseModels: 
          "application/json": !Ref ApiGatewayEmptyModel
        StatusCode: "200"
      - 
        StatusCode: "401"
      Integration: 
        CacheNamespace: !Ref ApiGatewayResource
        ContentHandling: "CONVERT_TO_TEXT"
        IntegrationHttpMethod: "POST"
        IntegrationResponses: 
        - 
          ResponseTemplates: {}
          StatusCode: "200"
        - 
          SelectionPattern: ".*[UNAUTHORIZED].*"
          StatusCode: "401"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates: 
          "application/json": |
              #set($allParams = $input.params())
              {
              "rawBody": "$util.escapeJavaScript($input.body).replace("\'", "'")",
              "body-json" : $input.json('$'),
              "params" : {
              #foreach($type in $allParams.keySet())
                  #set($params = $allParams.get($type))
              "$type" : {
                  #foreach($paramName in $params.keySet())
                  "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                      #if($foreach.hasNext),#end
                  #end
              }
                  #if($foreach.hasNext),#end
              #end
              },
              "stage-variables" : {
              #foreach($key in $stageVariables.keySet())
              "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                  #if($foreach.hasNext),#end
              #end
              },
              "context" : {
                  "account-id" : "$context.identity.accountId",
                  "api-id" : "$context.apiId",
                  "api-key" : "$context.identity.apiKey",
                  "authorizer-principal-id" : "$context.authorizer.principalId",
                  "caller" : "$context.identity.caller",
                  "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                  "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                  "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                  "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                  "http-method" : "$context.httpMethod",
                  "stage" : "$context.stage",
                  "source-ip" : "$context.identity.sourceIp",
                  "user" : "$context.identity.user",
                  "user-agent" : "$context.identity.userAgent",
                  "user-arn" : "$context.identity.userArn",
                  "request-id" : "$context.requestId",
                  "resource-id" : "$context.resourceId",
                  "resource-path" : "$context.resourcePath"
                  }
              }
        TimeoutInMillis: 29000
        Type: "AWS"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:discord_event_handler/invocations"

  ApiGatewayOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      RequestParameters: {}
      MethodResponses: 
      - 
        ResponseModels: 
          "application/json": !Ref ApiGatewayEmptyModel
        ResponseParameters: 
          "method.response.header.Access-Control-Allow-Headers": false
          "method.response.header.Access-Control-Allow-Methods": false
          "method.response.header.Access-Control-Allow-Origin": false
        StatusCode: "200"
      Integration: 
        CacheNamespace: !Ref ApiGatewayResource
        IntegrationResponses: 
        - 
          ResponseParameters: 
            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            "method.response.header.Access-Control-Allow-Origin": "'*'"
          ResponseTemplates: {}
          StatusCode: "200"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates: 
          "application/json": "{\"statusCode\": 200}"
        TimeoutInMillis: 29000
        Type: "MOCK"

  ApiGatewayEmptyModel:
    Type: "AWS::ApiGateway::Model"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Name: "EmptyResp"
      Description: "This is a default empty schema model"
      Schema: |
          {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "title" : "Empty Schema",
            "type" : "object"
          }
      ContentType: "application/json"

  ApiGatewayErrorResponseModel:
    Type: "AWS::ApiGateway::Model"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Name: "ErrorResp"
      Description: "This is a default error schema model"
      Schema: |
          {
            "$schema" : "http://json-schema.org/draft-04/schema#",
            "title" : "Error Schema",
            "type" : "object",
            "properties" : {
              "message" : { "type" : "string" }
            }
          }
      ContentType: "application/json"

  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: ApiGatewayPostMethod